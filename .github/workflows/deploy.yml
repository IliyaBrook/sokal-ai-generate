#file: noinspection HttpUrlsUsage
name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean GitHub Actions cache
        run: |
          echo "Cleaning GitHub Actions cache..."
          rm -rf ~/.npm
          rm -rf ~/.yarn
          rm -rf ~/.cache

      - name: Setup SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Debug SSH connection with verbose output
        run: |
          echo "Debugging SSH connection..."
          echo "Setting up SSH config with verbose logging"
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          echo "StrictHostKeyChecking no" > ~/.ssh/config
          echo "LogLevel DEBUG3" >> ~/.ssh/config

          # Connection attempt
          echo "Testing SSH connection to ${{ secrets.SERVER_IP }}"
          timeout 10 ssh -v root@${{ secrets.SERVER_IP }} "echo 'Connection successful'" || echo "Connection timed out"

      - name: Create root .env file for Docker Compose
        run: |
          echo "MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}" > .env
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env
          echo "PORT=${{ secrets.SERVER_PORT }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> .env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "ADMIN_USER_EMAIL=${{ secrets.ADMIN_USER_EMAIL }}" >> .env
          echo "ADMIN_USER_PASSWORD=${{ secrets.ADMIN_USER_PASSWORD }}" >> .env
          echo "ADMIN_USER_FIRST_NAME=${{ secrets.ADMIN_USER_FIRST_NAME }}" >> .env
          echo "ADMIN_USER_LAST_NAME=${{ secrets.ADMIN_USER_LAST_NAME }}" >> .env
          echo "FRONTEND_URL=http://localhost:80,http://frontend:3000,http://${{ secrets.SERVER_IP }},http://${{ secrets.SERVER_IP }}:80" >> .env
          echo "NEXT_PUBLIC_API_URL=http://backend:4000/api" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Install Docker on server (if needed)
        run: |
          echo "Installing Docker on server ${{ secrets.SERVER_IP }}..."
          ssh root@${{ secrets.SERVER_IP }} "if ! command -v docker &> /dev/null; then apt update && apt install -y docker.io docker-compose && systemctl enable docker && systemctl start docker; fi"

      - name: Deploy to Hetzner with detailed logging
        run: |
          echo "Deploying to server ${{ secrets.SERVER_IP }}..."
      
          # Create project directory with verbose output
          echo "Creating project directory..."
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "mkdir -p /root/sokal-ai-generate"
      
          # Clean up Docker resources
          echo "Cleaning up Docker resources..."
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "docker system prune -af --volumes"
      
          # Clean up old project files to prevent issues with cached or deleted files
          echo "Cleaning up old project files..."
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "rm -rf /root/sokal-ai-generate/*"
      
          # Ensure node_modules are cleaned up
          echo "Cleaning up node_modules..."
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "find /root/sokal-ai-generate -name 'node_modules' -type d -prune -exec rm -rf '{}' \;"
      
          # Clean up Next.js build cache
          echo "Cleaning up Next.js build cache..."
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "find /root/sokal-ai-generate -name '.next' -type d -prune -exec rm -rf '{}' \;"
      
          # Check disk space
          echo "Checking disk space..."
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "df -h"
      
          # Copy necessary files with verbose output
          echo "Copying files to server..."
          scp -v -r ./* ./.env ./.dockerignore root@${{ secrets.SERVER_IP }}:/root/sokal-ai-generate/
      
          # Check if files were copied successfully
          echo "Verifying copied files..."
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "ls -la /root/sokal-ai-generate"
      
          # Verify that problematic files don't exist
          echo "Verifying that ErrorIcon.tsx doesn't exist..."
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "find /root/sokal-ai-generate -name 'ErrorIcon.tsx' | wc -l | grep -q '0' && echo 'ErrorIcon.tsx not found, good!' || (echo 'ERROR: ErrorIcon.tsx found, removing it...' && find /root/sokal-ai-generate -name 'ErrorIcon.tsx' -delete)"
      
          # Run docker-compose on the server with debug output
          echo "Starting containers on server..."
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "cd /root/sokal-ai-generate && docker-compose down && docker builder prune -af && DEBUG=* docker-compose build --no-cache && docker-compose up -d"
