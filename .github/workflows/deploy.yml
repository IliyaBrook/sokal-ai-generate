name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Test Secrets
        run: |
          echo "Checking if secrets are available..."
          # Проверка наличия SERVER_IP (без вывода значения)
          if [ -n "${{ secrets.SERVER_IP }}" ]; then
            echo "SERVER_IP is set and has length: ${#${{ secrets.SERVER_IP }}}"
            echo "First 3 characters: ${${{ secrets.SERVER_IP }}:0:3}..."
          else
            echo "SERVER_IP is not set!"
          fi
          
          # Проверка других секретов (без вывода значений)
          echo "SSH_PRIVATE_KEY set: ${{ secrets.SSH_PRIVATE_KEY != '' }}"
          echo "SSH_KNOWN_HOSTS set: ${{ secrets.SSH_KNOWN_HOSTS != '' }}"
          echo "MONGO_USERNAME set: ${{ secrets.MONGO_USERNAME != '' }}"
          echo "MONGO_PASSWORD set: ${{ secrets.MONGO_PASSWORD != '' }}"
          echo "SERVER_PORT set: ${{ secrets.SERVER_PORT != '' }}"
          
          # Альтернативный способ проверки сетевых подключений
          echo "Trying to ping 157.180.25.1 to check network..."
          ping -c 3 157.180.25.1 || true
          
          # Проверка SSH команды
          echo "SSH command info:"
          ssh -V
          
          # Вывод информации об окружении
          echo "Environment details:"
          uname -a
          
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          
      - name: Create root .env file
        run: |
          echo "MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}" > .env
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env
          echo "PORT=${{ secrets.SERVER_PORT }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> .env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          
      - name: Create frontend .env.production file
        run: |
          echo "NEXT_PUBLIC_API_URL=http://${{ secrets.SERVER_IP }}:${{ secrets.SERVER_PORT }}/api" > frontend/.env.production
          
      - name: Create docker-compose.yml
        run: |
          cat > docker-compose.yml << 'EOL'
          version: '3.8'
          
          services:
            mongodb:
              image: mongo:latest
              restart: always
              environment:
                MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
                MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
              volumes:
                - mongodb_data:/data/db
              ports:
                - "27017:27017"
            
            backend:
              build:
                context: .
                dockerfile: backend/Dockerfile
              restart: always
              depends_on:
                - mongodb
              ports:
                - "${SERVER_PORT}:${SERVER_PORT}"
              environment:
                - NODE_ENV=production
            
            frontend:
              build:
                context: .
                dockerfile: frontend/Dockerfile
              restart: always
              depends_on:
                - backend
              ports:
                - "80:3000"
          
          volumes:
            mongodb_data:
          EOL
          
      - name: Install Docker on server (if needed)
        run: |
          SERVER_IP="${{ secrets.SERVER_IP }}"
          ssh root@$SERVER_IP "if ! command -v docker &> /dev/null; then apt update && apt install -y docker.io docker-compose && systemctl enable docker && systemctl start docker; fi"
          
      - name: Deploy to Hetzner
        run: |
          # Create project directory
          SERVER_IP="${{ secrets.SERVER_IP }}"
          ssh root@$SERVER_IP "mkdir -p /root/sokal-ai-generate"
          
          # Copy necessary files
          scp docker-compose.yml .env .dockerignore root@$SERVER_IP:/root/sokal-ai-generate/
          scp -r backend frontend shared-types configs root@$SERVER_IP:/root/sokal-ai-generate/
          
          # Run docker-compose on the server
          ssh root@$SERVER_IP "cd /root/sokal-ai-generate && docker-compose down && docker-compose up -d --build" 