name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Test Secrets
        run: |
          echo "Checking if secrets are available..."
          # Safe secret checks (without displaying values)
          if [ -n "${{ secrets.SERVER_IP }}" ]; then
            echo "SERVER_IP is set ✓"
          else
            echo "SERVER_IP is not set! ✗"
          fi
          
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "SSH_PRIVATE_KEY is set ✓"
          else
            echo "SSH_PRIVATE_KEY is not set! ✗"
          fi
          
          if [ -n "${{ secrets.SSH_KNOWN_HOSTS }}" ]; then
            echo "SSH_KNOWN_HOSTS is set ✓"
          else
            echo "SSH_KNOWN_HOSTS is not set! ✗"
          fi
          
          if [ -n "${{ secrets.MONGO_USERNAME }}" ]; then
            echo "MONGO_USERNAME is set ✓"
          else
            echo "MONGO_USERNAME is not set! ✗"
          fi
          
          if [ -n "${{ secrets.MONGO_PASSWORD }}" ]; then
            echo "MONGO_PASSWORD is set ✓"
          else
            echo "MONGO_PASSWORD is not set! ✗"
          fi
          
          if [ -n "${{ secrets.SERVER_PORT }}" ]; then
            echo "SERVER_PORT is set ✓"
          else
            echo "SERVER_PORT is not set! ✗"
          fi
          
          # Network connectivity check
          echo "Testing network connectivity to 157.180.25.1..."
          ping -c 3 157.180.25.1 || echo "Ping failed"
          
          # SSH command check
          echo "SSH command info:"
          ssh -V
          
          # Environment information
          echo "Environment details:"
          uname -a
          
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          
      - name: Debug SSH connection with verbose output
        run: |
          echo "Debugging SSH connection..."
          echo "Setting up SSH config with verbose logging"
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          echo "StrictHostKeyChecking no" > ~/.ssh/config
          echo "LogLevel DEBUG3" >> ~/.ssh/config
          
          # Connection attempt
          echo "Testing SSH connection to 157.180.25.1"
          timeout 10 ssh -v root@157.180.25.1 "echo 'Connection successful'" || echo "Connection timed out"

      - name: Create root .env file
        run: |
          echo "MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}" > .env
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env
          echo "PORT=${{ secrets.SERVER_PORT }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> .env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          
      - name: Set Server IP manually
        run: |
          echo "Setting SERVER_IP manually to 157.180.25.1"
          echo "SERVER_IP=157.180.25.1" >> $GITHUB_ENV
          
      - name: Create frontend .env.production file
        run: |
          echo "NEXT_PUBLIC_API_URL=http://157.180.25.1:${{ secrets.SERVER_PORT }}/api" > frontend/.env.production
          
      - name: Create missing package.json in root
        run: |
          echo "Creating root package.json file..."
          cat > package.json << 'EOL'
          {
            "name": "sokal_ai_generate",
            "private": true,
            "version": "1.0.0",
            "description": "Sokal_ai AI-Powered Content Generator",
            "main": "index.js",
            "repository": "https://github.com/IliyaBrook/sokal_ai_generate",
            "author": "iliyabrook <iliyabrook1987@gmail.com>",
            "license": "MIT",
            "engines": {
              "node": ">=22.0.0 <23.0.0"
            },
            "scripts": {
              "watch:types": "yarn --cwd shared-types watch",
              "start:production": "yarn build && cross-env PORT=80 yarn --cwd backend start",
              "build": "yarn build:server && yarn build:client",
              "build:server": "cross-env DISABLE_ESLINT=true yarn --cwd backend build",
              "build:client": "yarn --cwd frontend build --no-lint",
              "dev": "concurrently \"yarn watch:types\" \"yarn --cwd backend start:dev\" \"yarn --cwd frontend dev\"",
              "dev:server": "yarn --cwd backend start:dev",
              "dev:client": "yarn --cwd frontend dev",
              "lint": "yarn lint:server && yarn lint:client",
              "lint:server": "yarn --cwd backend lint",
              "lint:client": "yarn --cwd frontend lint",
              "format": "yarn format:server && yarn format:client",
              "format:server": "yarn --cwd backend format",
              "format:client": "yarn --cwd frontend format"
            },
            "workspaces": [
              "frontend",
              "backend",
              "shared-types",
              "configs"
            ],
            "dependencies": {
              "bcryptjs": "^3.0.2",
              "cross-env": "^7.0.3"
            },
            "devDependencies": {
              "concurrently": "^9.1.2"
            }
          }
          EOL
          echo "Creating yarn.lock file..."
          touch yarn.lock

      - name: Create docker-compose.yml with correct context
        run: |
          cat > docker-compose.yml << 'EOL'
          version: '3.8'
          
          services:
            mongodb:
              image: mongo:latest
              restart: always
              environment:
                MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
                MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
              volumes:
                - mongodb_data:/data/db
              ports:
                - "27017:27017"
            
            backend:
              build: ./backend
              restart: always
              depends_on:
                - mongodb
              ports:
                - "${SERVER_PORT}:${SERVER_PORT}"
              environment:
                - NODE_ENV=production
                - MONGO_USERNAME=${MONGO_USERNAME}
                - MONGO_PASSWORD=${MONGO_PASSWORD}
                - SERVER_PORT=${SERVER_PORT}
                - JWT_SECRET=${JWT_SECRET}
                - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
                - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
                - OPENAI_API_KEY=${OPENAI_API_KEY}
            
            frontend:
              build: ./frontend
              restart: always
              depends_on:
                - backend
              ports:
                - "80:3000"
              environment:
                - NODE_ENV=production
          
          volumes:
            mongodb_data:
          EOL
          
      - name: Install Docker on server (if needed)
        run: |
          echo "Installing Docker on server 157.180.25.1..."
          ssh root@157.180.25.1 "if ! command -v docker &> /dev/null; then apt update && apt install -y docker.io docker-compose && systemctl enable docker && systemctl start docker; fi"
          
      - name: Deploy to Hetzner with detailed logging
        run: |
          echo "Deploying to server 157.180.25.1..."
          
          # Create project directory with verbose output
          echo "Creating project directory..."
          ssh -o StrictHostKeyChecking=no root@157.180.25.1 "mkdir -p /root/sokal-ai-generate"
          
          # Copy necessary files with verbose output
          echo "Copying files to server..."
          scp -v docker-compose.yml .env .dockerignore root@157.180.25.1:/root/sokal-ai-generate/
          scp -v -r backend frontend shared-types configs root@157.180.25.1:/root/sokal-ai-generate/
          
          # Check if files were copied successfully
          echo "Verifying copied files..."
          ssh -o StrictHostKeyChecking=no root@157.180.25.1 "ls -la /root/sokal-ai-generate"
          
          # Create package.json on the server directly
          echo "Creating package.json on server..."
          ssh -o StrictHostKeyChecking=no root@157.180.25.1 "cat > /root/sokal-ai-generate/package.json << 'EOL'
          {
            \"name\": \"sokal_ai_generate\",
            \"private\": true,
            \"version\": \"1.0.0\",
            \"description\": \"Sokal_ai AI-Powered Content Generator\",
            \"main\": \"index.js\",
            \"repository\": \"https://github.com/IliyaBrook/sokal_ai_generate\",
            \"author\": \"iliyabrook <iliyabrook1987@gmail.com>\",
            \"license\": \"MIT\",
            \"engines\": {
              \"node\": \">=22.0.0 <23.0.0\"
            },
            \"scripts\": {
              \"watch:types\": \"yarn --cwd shared-types watch\",
              \"start:production\": \"yarn build && cross-env PORT=80 yarn --cwd backend start\",
              \"build\": \"yarn build:server && yarn build:client\",
              \"build:server\": \"cross-env DISABLE_ESLINT=true yarn --cwd backend build\",
              \"build:client\": \"yarn --cwd frontend build --no-lint\",
              \"dev\": \"concurrently \\\"yarn watch:types\\\" \\\"yarn --cwd backend start:dev\\\" \\\"yarn --cwd frontend dev\\\"\",
              \"dev:server\": \"yarn --cwd backend start:dev\",
              \"dev:client\": \"yarn --cwd frontend dev\",
              \"lint\": \"yarn lint:server && yarn lint:client\",
              \"lint:server\": \"yarn --cwd backend lint\",
              \"lint:client\": \"yarn --cwd frontend lint\",
              \"format\": \"yarn format:server && yarn format:client\",
              \"format:server\": \"yarn --cwd backend format\",
              \"format:client\": \"yarn --cwd frontend format\"
            },
            \"workspaces\": [
              \"frontend\",
              \"backend\",
              \"shared-types\",
              \"configs\"
            ],
            \"dependencies\": {
              \"bcryptjs\": \"^3.0.2\",
              \"cross-env\": \"^7.0.3\"
            },
            \"devDependencies\": {
              \"concurrently\": \"^9.1.2\"
            }
          }
          EOL"
          
          # Create empty yarn.lock file on server
          echo "Creating yarn.lock on server..."
          ssh -o StrictHostKeyChecking=no root@157.180.25.1 "touch /root/sokal-ai-generate/yarn.lock"
          
          # Update Dockerfiles on server
          echo "Updating Dockerfiles to work with simpler context..."
          
          # Update backend Dockerfile
          ssh -o StrictHostKeyChecking=no root@157.180.25.1 "cat > /root/sokal-ai-generate/backend/Dockerfile << 'EOL'
          FROM node:22-alpine

          WORKDIR /app
          
          # Copy all backend files
          COPY . /app/
          
          # Copy shared-types
          COPY ../shared-types /app/shared-types/
          COPY ../configs /app/configs/
          
          # Install dependencies and build
          RUN yarn install --frozen-lockfile
          RUN yarn build
          
          EXPOSE 4000
          
          CMD [\"yarn\", \"start:prod\"]
          EOL"
          
          # Update frontend Dockerfile
          ssh -o StrictHostKeyChecking=no root@157.180.25.1 "cat > /root/sokal-ai-generate/frontend/Dockerfile << 'EOL'
          FROM node:22-alpine
          
          WORKDIR /app
          
          # Copy all frontend files
          COPY . /app/
          
          # Copy shared-types
          COPY ../shared-types /app/shared-types/
          COPY ../configs /app/configs/
          
          # Install dependencies and build
          RUN yarn install --frozen-lockfile
          RUN yarn build
          
          EXPOSE 3000
          
          CMD [\"yarn\", \"start\"]
          EOL"
          
          # Run docker-compose on the server with debug output
          echo "Starting containers on server..."
          ssh -o StrictHostKeyChecking=no root@157.180.25.1 "cd /root/sokal-ai-generate && docker-compose down && DEBUG=* docker-compose up -d --build" 