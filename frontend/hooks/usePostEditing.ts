import { UserDataContext } from '@/contexts/UserData.context';
import {
  connectSocket,

  joinPostEditing,
  leavePostEditing,
  socket
} from '@/lib/socket';
import { IPost } from '@sokal_ai_generate/shared-types';
import { useCallback, useContext, useEffect, useRef, useState } from 'react';
import { toast } from 'sonner';
import { useAuthUserFetch, useDebounce } from '@/hooks';

interface UsePostEditingOptions {
  postId: string;
  initialContent: string;
  autoConnect?: boolean;
}

export interface Watcher {
  userId: string;
  clientId: string;
  username?: string;
}

export function usePostEditing({
  postId,
  initialContent,
  autoConnect = false,
}: UsePostEditingOptions) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è initialContent, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  const initialContentRef = useRef(initialContent);
  const [content, setContent] = useState(initialContentRef.current);
  const debouncedContent = useDebounce(content, 500); // –î–µ–±–∞—É–Ω—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  const [isConnected, setIsConnected] = useState(socket.connected);
  const [isSaving, setIsSaving] = useState(false);
  const [activeWatchers, setActiveWatchers] = useState<Watcher[]>([]);
  const contextData = useContext(UserDataContext);
  const user = contextData?.userData;
  const saveResolverRef = useRef<((value: boolean) => void) | null>(null);
  const apiFetch = useAuthUserFetch();
  const isMountedRef = useRef(false); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const isUpdatingFromSocketRef = useRef(false); // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —ç—Ö–∞

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—É–∫–∞
  useEffect(() => {
    console.log('üîÑ usePostEditing init:', {
      postId: postId.substring(postId.length - 6),
      initialContent: initialContentRef.current?.substring(0, 30) + '...',
      autoConnect
    });
    isMountedRef.current = true;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ—Å—Ç–∞)
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å ref, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–≥–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (initialContent !== initialContentRef.current) {
        console.log("üîÑ Initial content changed, updating state.");
        initialContentRef.current = initialContent;
        setContent(initialContent);
    }


    return () => {
      isMountedRef.current = false;
    };
  // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º initialContent –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º ref
  }, [postId, autoConnect]);

  const parseWatchers = useCallback((watchersData: string[]) => {
    // console.log('Parsing watchers data:', watchersData);
    const uniqueWatchersMap = new Map<string, Watcher>();

    watchersData.forEach((watcher) => {
      const parts = watcher.split(':');
      if (parts.length < 2) {
        console.warn('Invalid watcher format:', watcher);
        return;
      }

      const userId = parts[0];
      const clientId = parts[1];
      const userName = parts.length > 2 ? parts[2] : undefined;
      const uniqueKey = `${userId}:${clientId}`;
      const isAnonymous = userId.startsWith('anonymous-');

      uniqueWatchersMap.set(uniqueKey, {
        userId,
        clientId,
        username: isAnonymous ? undefined : userName
      });
    });

    const result = Array.from(uniqueWatchersMap.values());
    // console.log('Parsed watchers:', result);
    return result;
  }, []);

  // --- –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–æ–∫–µ—Ç—É ---
  useEffect(() => {
    const onConnect = () => {
      console.log('üéØ Socket connected in usePostEditing!', socket.id);
      setIsConnected(true);
      // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (postId && isMountedRef.current) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        console.log('üö™ Re-joining post room after connect:', postId);
        joinPostEditing(postId, user);
      }
    };

    const onDisconnect = (reason: string) => {
      console.log('üîå Socket disconnected in usePostEditing:', reason);
      setIsConnected(false);
      setActiveWatchers([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–µ
    };

    socket.on('connect', onConnect);
    socket.on('disconnect', onDisconnect);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    setIsConnected(socket.connected);

    console.log('üîÑ Setting up connect/disconnect listeners. Current state:',
        socket.connected ? 'connected' : 'disconnected',
        'ID:', socket.id);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (autoConnect) {
      if (!socket.connected) {
        console.log('üîÑ Auto connecting to socket...');
        connectSocket(); // connectSocket —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è
      }
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è, –µ—Å–ª–∏ —Å–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è (onConnect —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
      if (socket.connected && postId) {
         console.log('üö™ Auto joining post room:', postId);
         joinPostEditing(postId, user);
      }
    }

    return () => {
      console.log('üßπ Cleaning up connect/disconnect listeners.');
      socket.off('connect', onConnect);
      socket.off('disconnect', onDisconnect);
      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ö—É–∫–∞, –µ—Å–ª–∏ autoConnect –±—ã–ª –≤–∫–ª—é—á–µ–Ω
      if (autoConnect && postId && socket.connected) {
         console.log(`üö™ Leaving post room on unmount: ${postId}`);
         leavePostEditing(postId, user);
      }
    };
  // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: postId, user (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è), autoConnect
  }, [postId, user, autoConnect]); // –£–±—Ä–∞–ª–∏ parseWatchers, —Ç.–∫. –æ–Ω useCallback

  // --- –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞ ---
  useEffect(() => {
    // –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º, –µ—Å–ª–∏ —Ö—É–∫ –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
    if (!isMountedRef.current) return;

    const onJoinPostResponse = (data: { editors?: string[], content?: string }) => {
      console.log('üì£ Received join-post-response:', data);
      if (data.editors) {
        setActiveWatchers(parseWatchers(data.editors));
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Å–∞–º—ã–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
      if (data.content && data.content !== content) {
        console.log('üìù Updating content from join response:', data.content.substring(0, 30) + '...');
        isUpdatingFromSocketRef.current = true; // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        setContent(data.content);
      }
    };

    const onContentUpdated = (data: { content: string, userId: string, clientId: string }) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—à–ª–æ –æ—Ç –Ω–∞—à–µ–≥–æ –∂–µ –∫–ª–∏–µ–Ω—Ç–∞ (—ç—Ö–æ)
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º clientId, —Ç–∞–∫ –∫–∞–∫ userId –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º (anonymous)
      if (data.clientId === socket.id) {
          console.log('üìù Ignoring self-echoed content-updated');
          return;
      }

      console.log('üìù Received content-updated from other client:', data.clientId, data.content?.substring(0, 30) + '...');
      if (data.content && data.content !== content) { // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        isUpdatingFromSocketRef.current = true; // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        setContent(data.content);
      } else {
        console.log('üìù Received content is same as current or empty, skipping update.');
      }
    };

    const onEditorsUpdated = (editorsData: string[]) => {
      console.log('üëÄ Received editors update:', editorsData);
      setActiveWatchers(parseWatchers(editorsData));
    };

    const onSaveContentResponse = (data: { success: boolean, error?: string }) => {
      console.log('üíæ Received save-content-response:', data);
      setIsSaving(false);
      if (saveResolverRef.current) {
        saveResolverRef.current(data.success);
        saveResolverRef.current = null; // –û—á–∏—â–∞–µ–º ref –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      }
      if (data.success) {
        toast.success('Post saved successfully');
      } else {
        toast.error(`Failed to save: ${data.error || 'Unknown error'}`);
      }
    };

    const onContentSaved = (data: { timestamp: string }) => {
      console.log('üìå Received content-saved:', data);
      toast.info(`Post saved by another user at ${new Date(data.timestamp).toLocaleTimeString()}`);
    };

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    console.log(`üéß Registering socket event listeners for post: ${postId.substring(postId.length - 6)}`);
    socket.on('join-post-response', onJoinPostResponse);
    socket.on('content-updated', onContentUpdated);
    socket.on('editors', onEditorsUpdated);
    socket.on('save-content-response', onSaveContentResponse);
    socket.on('content-saved', onContentSaved);

    return () => {
      // –°–Ω–∏–º–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ postId/user
      console.log(`üéß Unregistering socket event listeners for post: ${postId.substring(postId.length - 6)}`);
      socket.off('join-post-response', onJoinPostResponse);
      socket.off('content-updated', onContentUpdated);
      socket.off('editors', onEditorsUpdated);
      socket.off('save-content-response', onSaveContentResponse);
      socket.off('content-saved', onContentSaved);
    };
  // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: postId, user, parseWatchers (useCallback)
  // –£–±—Ä–∞–ª–∏ content!
  }, [postId, user, parseWatchers]);

  // --- –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç ---
  useEffect(() => {
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —Ö—É–∫ –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç —Å–æ–∫–µ—Ç–∞
    if (!isMountedRef.current || isUpdatingFromSocketRef.current) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (isUpdatingFromSocketRef.current) {
            console.log("üö© Resetting socket update flag");
            isUpdatingFromSocketRef.current = false;
        }
        return;
    }

    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–±–∞—É–Ω—Å–∞
    if (debouncedContent === initialContentRef.current && content === initialContentRef.current) {
      // console.log('üñãÔ∏è Skipping initial/unchanged content send');
      return;
    }

    if (socket.connected && postId) {
      const userId = user?.id || `anonymous-${socket.id}`;
      const userName = user ? `${user.firstname} ${user.lastname}`.trim() : '';

      console.log('üì§ Sending content-update via socket:', debouncedContent?.substring(0, 30) + '...');
      socket.emit('content-update', {
        postId,
        content: debouncedContent, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        userId,
        userName,
        clientId: socket.id // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —ç—Ö–∞
      });
      // –û–±–Ω–æ–≤–ª—è–µ–º ref –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—ã–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
      // initialContentRef.current = debouncedContent; // –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. initialContentRef - –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    } else {
       console.warn('üì§ Socket not connected, cannot send content update.');
    }
  // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç debouncedContent –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
  }, [debouncedContent, postId, user, isConnected]); // –î–æ–±–∞–≤–∏–ª–∏ isConnected

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connect = useCallback(() => {
    console.log('üîå Manual connect requested');
    connectSocket(); // –§—É–Ω–∫—Ü–∏—è connectSocket —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —ç—Ñ—Ñ–µ–∫—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –µ—Å–ª–∏ autoConnect=true,
    // –∏–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞—Ç—å joinPostEditing –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ autoConnect=false
    if (!autoConnect && postId && socket.connected) {
        console.log('üö™ Manually joining post room after connect:', postId);
        joinPostEditing(postId, user);
    } else if (!autoConnect && postId && !socket.connected) {
        // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, joinPostEditing –≤—ã–∑–æ–≤–µ—Ç connectSocket –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –ø–æ–∑–∂–µ
        console.log('üö™ Manually joining post room (will connect first):', postId);
        joinPostEditing(postId, user);
    }
  }, [postId, user, autoConnect]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  const disconnect = useCallback(() => {
    if (socket.connected && postId) {
      console.log(`üö™ Leaving post room manually: ${postId}`);
      leavePostEditing(postId, user);
      // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–æ–∫–µ—Ç, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
      // disconnectSocket();
    }
  }, [postId, user]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑–≤–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ RichTextEditor)
  const updateContent = useCallback((newContent: string) => {
    // console.log('üñäÔ∏è updateContent called with:', newContent?.substring(0, 30) + '...');
    // –ù–µ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ isUpdatingFromSocketRef.current = false –∑–¥–µ—Å—å,
    // –æ–Ω —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ —ç—Ñ—Ñ–µ–∫—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    setContent(newContent);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const saveContent = useCallback(async (): Promise<boolean> => {
    const userId = user?.id || `anonymous-${socket.id}`;
    setIsSaving(true);

    // –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
    if (socket.connected) {
      console.log('üíæ Requesting save via socket...');
      return new Promise<boolean>((resolve) => {
        saveResolverRef.current = resolve; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–æ–∫–µ—Ç–∞

        socket.emit('save-content', {
          postId,
          content, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ, –Ω–µ –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          userId,
          clientId: socket.id
        });

        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const timeoutId = setTimeout(() => {
          if (saveResolverRef.current) {
            console.error('üíæ Save operation timed out via socket.');
            toast.error('Save operation timed out');
            setIsSaving(false);
            saveResolverRef.current(false); // –†–µ–∑–æ–ª–≤–∏–º –ø—Ä–æ–º–∏—Å –∫–∞–∫ false
            saveResolverRef.current = null;
          }
        }, 10000); // –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥

        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–µ–ª —Ä–∞–Ω—å—à–µ
        const originalResolver = saveResolverRef.current;
        saveResolverRef.current = (success: boolean) => {
            clearTimeout(timeoutId);
            originalResolver(success);
        };

      }).catch(error => {
          console.error("Error in save promise:", error);
          setIsSaving(false);
          return false;
      });
    }

    // –§–æ–ª–±—ç–∫ —á–µ—Ä–µ–∑ HTTP, –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    console.log('üíæ Socket not connected, using HTTP fallback to save...');
    try {
      const response = await apiFetch<{ success: boolean; message?: string; post?: IPost }>(`/api/posts/${postId}/save`, { // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        method: 'PUT',
        body: JSON.stringify({ content }), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
      });
      if (response?.success) {
        toast.success('Post saved successfully (HTTP fallback)');
        setIsSaving(false);
        return true;
      } else {
        toast.error(`Failed to save (HTTP): ${response?.message || 'Unknown error'}`);
        setIsSaving(false);
        return false;
      }
    } catch (error) {
      console.error('Error saving via HTTP fallback:', error);
      toast.error('Failed to save post (HTTP)');
      setIsSaving(false);
      return false;
    }
  }, [postId, content, user, apiFetch, isConnected]); // –î–æ–±–∞–≤–∏–ª–∏ isConnected

  // console.log('üîÑ usePostEditing render. Content:', content?.substring(0, 30) + '...');

  return {
    content,
    updateContent,
    saveContent,
    isConnected,
    isSaving,
    activeWatchers,
    connect,
    disconnect,
  };
}
